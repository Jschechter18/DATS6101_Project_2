data = students, family = binomial)
model_6 <- glm(Pass_Fail ~ Family_Income_Level,
data = students, family = binomial)
model_7 <- glm(Pass_Fail ~ Attendance,
data = students, family = binomial)
model_8 <- glm(Pass_Fail ~ Engagement_Ratio,
data = students, family = binomial)
model_9 <- glm(Pass_Fail ~ Sleep_Stress_Score,
data = students, family = binomial)
model_10 <- glm(Pass_Fail ~ Improvement,
data = students, family = binomial)
summary(model_1)
summary(model_8) # engagement is most significant right now
head(predict(model_8,type="response"))
head(predict(model_8,type="response"))
confusionMatrix(students$predicted_class, students$Pass_Fail, positive = "Pass")
students$Pass_Fail <- factor(students$Pass_Fail, levels = c("Fail", "Pass"))
students$predicted_class <- factor(students$predicted_class, levels = c("Fail", "Pass"))
predictions <- predict(model_8, type = "response")
students$Pass_Fail <- factor(students$Pass_Fail, levels = c("Fail", "Pass"))
students$predicted_class <- factor(students$predicted_class, levels = c("Fail", "Pass"))
students$predictions <- predict(model_8, type = "response")
students$Pass_Fail <- factor(students$Pass_Fail, levels = c("Fail", "Pass"))
students$predicted_class <- factor(students$predictions, levels = c("Fail", "Pass"))
confusionMatrix(students$predicted_class, students$Pass_Fail, positive = "Pass")
head(predict(model_8,type="response"))
students$predictions <- predict(model_8, type = "response")
students$Pass_Fail <- factor(students$Pass_Fail, levels = c("Fail", "Pass"))
students$predicted_class <- ifelse(students$predictions > 0.4, "Pass", "Fail")
#students$predicted_class <- factor(students$predicted_class, levels = c("Fail", "Pass"))
confusionMatrix(students$predicted_class, students$Pass_Fail, positive = "Pass")
students$predictions <- predict(model_8, type = "response")
students$Pass_Fail <- factor(students$Pass_Fail, levels = c("Fail", "Pass"))
students$predicted_class <- ifelse(students$predictions > 0.4, "Pass", "Fail")
students$predicted_class <- factor(students$predicted_class, levels = c("Fail", "Pass"))
confusionMatrix(students$predicted_class, students$Pass_Fail, positive = "Pass")
students$predictions <- predict(model_8, type = "response")
students$Pass_Fail <- factor(students$Pass_Fail, levels = c("Fail", "Pass"))
students$predicted_class <- ifelse(students$predictions > 0.35, "Pass", "Fail")
students$predicted_class <- factor(students$predicted_class, levels = c("Fail", "Pass"))
confusionMatrix(students$predicted_class, students$Pass_Fail, positive = "Pass")
students$predictions <- predict(model_8, type = "response")
students$Pass_Fail <- factor(students$Pass_Fail, levels = c("Fail", "Pass"))
students$predicted_class <- ifelse(students$predictions > 0.5, "Pass", "Fail")
students$predicted_class <- factor(students$predicted_class, levels = c("Fail", "Pass"))
confusionMatrix(students$predicted_class, students$Pass_Fail, positive = "Pass")
students$predictions <- predict(model_8, type = "response")
students$Pass_Fail <- factor(students$Pass_Fail, levels = c("Fail", "Pass"))
# students$predicted_class <- ifelse(students$predictions > 0.5, "Pass", "Fail") # this one is pretty good
students$predicted_class <- ifelse(students$predictions > 0.5, "Pass", "Fail")
students$predicted_class <- factor(students$predicted_class, levels = c("Fail", "Pass"))
confusionMatrix(students$predicted_class, students$Pass_Fail, positive = "Pass")
students$predictions <- predict(model_8, type = "response")
students$Pass_Fail <- factor(students$Pass_Fail, levels = c("Fail", "Pass"))
# students$predicted_class <- ifelse(students$predictions > 0.5, "Pass", "Fail") # this one is pretty good
students$predicted_class <- ifelse(students$predictions > 0.65, "Pass", "Fail")
students$predicted_class <- factor(students$predicted_class, levels = c("Fail", "Pass"))
confusionMatrix(students$predicted_class, students$Pass_Fail, positive = "Pass")
students$predictions <- predict(model_8, type = "response")
students$Pass_Fail <- factor(students$Pass_Fail, levels = c("Fail", "Pass"))
# students$predicted_class <- ifelse(students$predictions > 0.5, "Pass", "Fail") # this one is pretty good
students$predicted_class <- ifelse(students$predictions > 0.6, "Pass", "Fail")
students$predicted_class <- factor(students$predicted_class, levels = c("Fail", "Pass"))
confusionMatrix(students$predicted_class, students$Pass_Fail, positive = "Pass")
students$predictions <- predict(model_8, type = "response")
students$Pass_Fail <- factor(students$Pass_Fail, levels = c("Fail", "Pass"))
#students$predicted_class <- ifelse(students$predictions > 0.6, "Pass", "Fail") # best one thus far
students$predicted_class <- ifelse(students$predictions > 0.7, "Pass", "Fail")
students$predicted_class <- factor(students$predicted_class, levels = c("Fail", "Pass"))
confusionMatrix(students$predicted_class, students$Pass_Fail, positive = "Pass")
students$predictions <- predict(model_8, type = "response")
students$Pass_Fail <- factor(students$Pass_Fail, levels = c("Fail", "Pass"))
#students$predicted_class <- ifelse(students$predictions > 0.6, "Pass", "Fail") # best one thus far
students$predicted_class <- ifelse(students$predictions > 0.65, "Pass", "Fail")
students$predicted_class <- factor(students$predicted_class, levels = c("Fail", "Pass"))
confusionMatrix(students$predicted_class, students$Pass_Fail, positive = "Pass")
students$predictions <- predict(model_8, type = "response")
students$Pass_Fail <- factor(students$Pass_Fail, levels = c("Fail", "Pass"))
students$predicted_class <- ifelse(students$predictions > 0.6, "Pass", "Fail") # best one thus far
#students$predicted_class <- ifelse(students$predictions > 0.65, "Pass", "Fail")
students$predicted_class <- factor(students$predicted_class, levels = c("Fail", "Pass"))
confusionMatrix(students$predicted_class, students$Pass_Fail, positive = "Pass")
roc(students$Pass_Fail,
predict(model_8, type = "response"),
plot = TRUE,
print.auc = TRUE,
col = "blue",
lwd = 2)
summary(model_8) # engagement is most significant right now
# BEST MODEL
engagement_model <- glm(Pass_Fail ~ Engagement_Ratio,
data = students, family = binomial)
summary(engagement_model) # engagement is most significant right now
head(predict(engagement_model,type="response"))
students$predictions <- predict(engagement_model, type = "response")
students$predictions <- predict(engagement_model, type = "response")
students$Pass_Fail <- factor(students$Pass_Fail, levels = c("Fail", "Pass"))
students$predicted_class <- ifelse(students$predictions > 0.6, "Pass", "Fail") # best one thus far
students$predicted_class <- factor(students$predicted_class, levels = c("Fail", "Pass"))
confusionMatrix(students$predicted_class, students$Pass_Fail, positive = "Pass")
roc(students$Pass_Fail,
predict(engagement_model, type = "response"),
plot = TRUE,
print.auc = TRUE,
col = "blue",
lwd = 2)
improved_engagement_model <- glm(Pass_Fail ~ Engagement_Ratio + Parent_Education_Level,
data = students, family = binomial)
summary(improved_engagement_model)
roc(students$Pass_Fail,
predict(improved_engagement_model, type = "response"),
plot = TRUE,
print.auc = TRUE,
col = "blue",
lwd = 2)
improved_engagement_model <- glm(Pass_Fail ~ Engagement_Ratio + Improvement,
data = students, family = binomial)
summary(improved_engagement_model)
roc(students$Pass_Fail,
predict(improved_engagement_model, type = "response"),
plot = TRUE,
print.auc = TRUE,
col = "blue",
lwd = 2)
improved_engagement_model <- glm(Pass_Fail ~ Engagement_Ratio + Family_Income_Level,
data = students, family = binomial)
summary(improved_engagement_model)
improved_engagement_model <- glm(Pass_Fail ~ Engagement_Ratio + Midterm_Score,
data = students, family = binomial)
summary(improved_engagement_model)
roc(students$Pass_Fail,
predict(improved_engagement_model, type = "response"),
plot = TRUE,
print.auc = TRUE,
col = "blue",
lwd = 2)
improved_engagement_model <- glm(Pass_Fail ~ Engagement_Ratio * Midterm_Score,
data = students, family = binomial)
summary(improved_engagement_model)
roc(students$Pass_Fail,
predict(improved_engagement_model, type = "response"),
plot = TRUE,
print.auc = TRUE,
col = "blue",
lwd = 2)
improved_engagement_model <- glm(Pass_Fail ~ Engagement_Ratio * Final_Score,
data = students, family = binomial)
summary(improved_engagement_model)
improved_engagement_model <- glm(Pass_Fail ~ Engagement_Ratio + Final_Score,
data = students, family = binomial)
summary(improved_engagement_model)
roc(students$Pass_Fail,
predict(improved_engagement_model, type = "response"),
plot = TRUE,
print.auc = TRUE,
col = "blue",
lwd = 2)
improved_engagement_model <- glm(Pass_Fail ~ Engagement_Ratio * Final_Score,
data = students, family = binomial)
summary(improved_engagement_model)
roc(students$Pass_Fail,
predict(improved_engagement_model, type = "response"),
plot = TRUE,
print.auc = TRUE,
col = "blue",
lwd = 2)
roc(students$Pass_Fail,
#predict(engagement_model, type = "response"),
students$predictions,
plot = TRUE,
print.auc = TRUE,
col = "blue",
lwd = 2)
roc(students$Pass_Fail,
#predict(engagement_model, type = "response"),
students$predicted_class,
plot = TRUE,
print.auc = TRUE,
col = "blue",
lwd = 2)
roc(students$Pass_Fail,
#predict(engagement_model, type = "response"),
students$predictions,
plot = TRUE,
print.auc = TRUE,
col = "blue",
lwd = 2)
roc(students$Pass_Fail,
students$predictions,
plot = TRUE,
print.auc = TRUE,
col = "blue",
lwd = 2)
students$Engagement_Ratio_Improved <- (students$Participation_Score +
students$Attendance +
students$Study_Hours_per_Week
+ students$Assignments_Avg) / 3
improved_engagement_model <- glm(Pass_Fail ~ Engagement_Ratio_Improved * Final_Score,
data = students, family = binomial)
summary(improved_engagement_model)
improved_engagement_model <- glm(Pass_Fail ~ Engagement_Ratio_Improved,
data = students, family = binomial)
summary(improved_engagement_model)
roc(students$Pass_Fail,
predict(improved_engagement_model, type = "response"),
plot = TRUE,
print.auc = TRUE,
col = "blue",
lwd = 2)
students$Engagement_Ratio_Improved <- (students$Participation_Score +
students$Attendance +
students$Study_Hours_per_Week
+ students$Assignments_Avg) / 4
improved_engagement_model <- glm(Pass_Fail ~ Engagement_Ratio_Improved,
data = students, family = binomial)
summary(improved_engagement_model)
roc(students$Pass_Fail,
predict(improved_engagement_model, type = "response"),
plot = TRUE,
print.auc = TRUE,
col = "blue",
lwd = 2)
loadPkg("ggplot2")
# The package "ezids" (EZ Intro to Data Science) includes a lot of the helper functions we developed for the course.
# Some of the frequently used functions are loadPkg(), xkabledply(), xkablesummary(), uzscale(), etc.
library(ezids)
# some of common options (and the defaults) are:
# include=T, eval=T, echo=T, results='hide'/'asis'/'markup',..., collapse=F, warning=T, message=T, error=T, cache=T, fig.width=6, fig.height=4, fig.dim=c(6,4) #inches, fig.align='left'/'center','right',
# knitr::opts_chunk$set(warning = F, results = "markup", message = F)
knitr::opts_chunk$set(warning = F, results = "hide", message = F)
options(scientific=T, digits = 3)
# options(scipen=9, digits = 3)
# ‘scipen’: integer. A penalty to be applied when deciding to print numeric values in fixed or exponential notation.  Positive values bias towards fixed and negative towards scientific notation: fixed notation will be preferred unless it is more than ‘scipen’ digits wider.
# use scipen=999 to prevent scientific notation at all times
loadPkg("ggplot2")
loadPkg("ISLR")
str(Hitters)
summary(Hitters)
hittersC = Hitters[,c('AtBat','Hits','HmRun','Runs','RBI','Walks','Years','League','Division','PutOuts','Assists','Errors','Salary')] # cleaned dataset
unloadPkg("ISLR")
loadPkg("leaps")
#This is essentially best fit
reg.best10 <- regsubsets(Salary~. , data = hittersC, nvmax = 10, nbest = 1, method = "exhaustive")  # leaps::regsubsets() - Model selection by exhaustive (default) search, forward or backward stepwise, or sequential replacement
#The plot will show the Adjust R^2 when using the variables across the bottom
plot(reg.best10, scale = "adjr2", main = "Adjusted R^2")
plot(reg.best10, scale = "r2", main = "R^2")
# In the "leaps" package, we can use scale=c("bic","Cp","adjr2","r2")
plot(reg.best10, scale = "bic", main = "BIC")
plot(reg.best10, scale = "Cp", main = "Cp")
summary(reg.best10)
model <- glm(Pass_Fail ~ Study_Hours_per_Week +
Internet_Access_at_Home +
Parent_Education_Level +
Stress_Level +
Extracurricular_Activities +
Family_Income_Level +
Attendance +
Engagement_Ratio +
Sleep_Stress_Score +
Improvement,
data = students, family = binomial)
# Stepwise selection
library(MASS)
stepwise_model <- stepAIC(model, direction = "both")
summary(stepwise_model)
attendence_model <- glm(Pass_Fail ~ Attendance,
data = students, family = binomial)
summary(attendence_model)
roc(students$Pass_Fail,
predict(attendence_model, type = "response"),
plot = TRUE,
print.auc = TRUE,
col = "blue",
lwd = 2)
cor(students[, c("Total_Score", "Study_Hours_per_Week",
"Sleep_Hours_per_Night",
"Attendance")], method="pearson")
cor(students, method="pearson")
model <- glm(Pass_Fail ~ Study_Hours_per_Week +
Internet_Access_at_Home +
Parent_Education_Level +
Stress_Level +
Extracurricular_Activities +
Family_Income_Level +
Attendance +
Engagement_Ratio +
Sleep_Stress_Score +
Improvement,
data = students, family = binomial)
# Stepwise selection
library(MASS)
stepwise_model <- stepAIC(model, direction = "both")
summary(stepwise_model)
model <- glm(Pass_Fail ~ Study_Hours_per_Week +
Internet_Access_at_Home +
Parent_Education_Level +
Stress_Level +
Extracurricular_Activities +
Family_Income_Level +
Attendance,
data = students, family = binomial)
# Stepwise selection
stepwise_model <- stepAIC(model, direction = "both")
summary(stepwise_model)
attendance_model <- glm(Pass_Fail ~ Attendance,
data = students, family = binomial)
attendance_model <- glm(Pass_Fail ~ Attendance,
data = students, family = binomial)
summary(attendance_model)
roc(students$Pass_Fail,
predict(attendance_model, type = "response"),
plot = TRUE,
print.auc = TRUE,
col = "blue",
lwd = 2)
students$Engagement_Ratio <- (students$Participation_Score + students$Attendance + students$Study_Hours_per_Week) / 3
# BEST MODEL
engagement_model <- glm(Pass_Fail ~ Engagement_Ratio,
data = students, family = binomial)
summary(engagement_model) # engagement is most significant right now
head(predict(engagement_model,type="response"))
students$predictions <- predict(engagement_model, type = "response")
students$Pass_Fail <- factor(students$Pass_Fail, levels = c("Fail", "Pass"))
students$predicted_class <- ifelse(students$predictions > 0.6, "Pass", "Fail") # best one thus far
students$predicted_class <- factor(students$predicted_class, levels = c("Fail", "Pass"))
confusionMatrix(students$predicted_class, students$Pass_Fail, positive = "Pass")
roc(students$Pass_Fail,
students$predictions,
plot = TRUE,
print.auc = TRUE,
col = "blue",
lwd = 2)
students$predictions <- predict(Attendance, type = "response")
students$predictions <- predict(attendance_model, type = "response")
students$Pass_Fail <- factor(students$Pass_Fail, levels = c("Fail", "Pass"))
students$predicted_class <- ifelse(students$predictions > 0.6, "Pass", "Fail") # best one thus far
students$predicted_class <- factor(students$predicted_class, levels = c("Fail", "Pass"))
confusionMatrix(students$predicted_class, students$Pass_Fail, positive = "Pass")
roc(students$Pass_Fail,
predict(attendance_model, type = "response"),
plot = TRUE,
print.auc = TRUE,
col = "blue",
lwd = 2)
students$Engagement_Ratio <- (students$Participation_Score + students$Attendance + students$Study_Hours_per_Week) / 3
# BEST MODEL
engagement_model <- glm(Pass_Fail ~ Engagement_Ratio,
data = students, family = binomial)
summary(engagement_model) # engagement is most significant right now
head(predict(engagement_model,type="response"))
students$predictions <- predict(engagement_model, type = "response")
students$Pass_Fail <- factor(students$Pass_Fail, levels = c("Fail", "Pass"))
students$predicted_class <- ifelse(students$predictions > 0.6, "Pass", "Fail") # best one thus far
students$predicted_class <- factor(students$predicted_class, levels = c("Fail", "Pass"))
confusionMatrix(students$predicted_class, students$Pass_Fail, positive = "Pass")
roc(students$Pass_Fail,
students$predictions,
plot = TRUE,
print.auc = TRUE,
col = "blue",
lwd = 2)
coefs <- summary(stepwise_model)$coefficients
# Remove intercept row
coefs_no_intercept <- coefs[-1, ]
# Sort by smallest p-value (most significant)
sorted <- coefs_no_intercept[order(coefs_no_intercept[, "Pr(>|z|)"]), ]
# Some of common RMD options (and the defaults) are:
# include=T, eval=T, echo=T, results='hide'/'asis'/'markup',..., collapse=F, warning=T, message=T, error=T, cache=T, fig.width=6, fig.height=4, fig.dim=c(6,4) #inches, fig.align='left'/'center','right',
knitr::opts_chunk$set(results="markup", warning = F, message = F)
# Can globally set option for number display format.
options(scientific=T, digits = 3)
# options(scipen=9, digits = 3)
# The package "ezids" (EZ Intro to Data Science) includes some helper functions we developed for the course.
# Some of the frequently used functions are loadPkg(), xkabledply(), xkablesummary(), uzscale(), etc.
# You will need to install it (once) from GitHub.
# library(devtools)
# devtools::install_github("physicsland/ezids")
# Then load the package in your R session.
library(ezids)
titanic_orig <- read.csv("Titanic.csv", stringsAsFactors = F)
View(titanic_orig)
View(titanic_orig)
titanic_orig <- read.csv("Titanic.csv", stringsAsFactors = F)
# Check the structure of the data
str(titanic_orig)
# Check the first few rows of the data
head(titanic_orig)
titanic_orig <- read.csv("Titanic.csv", stringsAsFactors = F)
str(titanic_orig)
head(titanic_orig)
sum(is.na(titanic_orig$age))
titanic <- titanic_orig %>% drop_na(age)
nrow(titanic)
titanic$sibsp <- as.factor(titanic$sibsp)
titanic$parch <- as.factor(titanic$parch)
str(titanic)
titanic$pclass <- as.factor(titanic$pclass)
titanic$survived <- as.factor(titanic$survived)
titanic$sex <- as.factor(titanic$sex)
titanic$embarked <- as.factor(titanic$embarked)
titanic$sibsp <- as.factor(titanic$sibsp)
titanic$parch <- as.factor(titanic$parch)
#str(titanic)
titanic$pclass <- as.factor(titanic$pclass)
titanic$survived <- as.factor(titanic$survived)
titanic$sex <- as.factor(titanic$sex)
titanic$embarked <- as.factor(titanic$embarked)
sum(is.na(titanic_orig$age))
titanic_cleaned <- titanic_orig %>% drop_na(age)
nrow(titanic)
titanic_cleaned$sibsp <- as.factor(titanic$sibsp)
titanic_cleaned$parch <- as.factor(titanic$parch)
#str(titanic_cleaned)
titanic_cleaned$pclass <- as.factor(titanic$pclass)
titanic_cleaned$survived <- as.factor(titanic$survived)
titanic_cleaned$sex <- as.factor(titanic$sex)
titanic_cleaned$embarked <- as.factor(titanic$embarked)
t.test(age ~ survived, data = titanic)
table_sex <- table(titanic$sex, titanic$survived)
chisq.test(table_sex)
table_pclass <- table(titanic$pclass, titanic$survived)
chisq.test(table_pclass)
t.test(age ~ survived, data = titanic_cleaned)
table_sex <- table(titanic_cleaned$sex, titanic_cleaned$survived)
chisq.test(table_sex)
table_pclass <- table(titanic_cleaned$pclass, titanic_cleaned$survived)
chisq.test(table_pclass)
model_age_pclass <- glm(survived ~ age + pclass, data = titanic_cleaned, family = "binomial")
summary(model1)
model_age_pclass <- glm(survived ~ age + pclass, data = titanic_cleaned, family = "binomial")
summary(modell_age_pclass)
model_age_pclass <- glm(survived ~ age + pclass, data = titanic_cleaned, family = "binomial")
summary(model_age_pclass)
prob_age_pclass <- predict(model_age_pclass, type = "response")
pred1 <- ifelse(prob_age_pclass > 0.5, 1, 0)
confusionMatrix(factor(pred_age_pclass), titanic_cleaned$survived, positive = "1")
model_age_pclass <- glm(survived ~ age + pclass, data = titanic_cleaned, family = "binomial")
summary(model_age_pclass)
prob_age_pclass <- predict(model_age_pclass, type = "response")
predl_age_pclass <- ifelse(prob_age_pclass > 0.5, 1, 0)
confusionMatrix(factor(pred_age_pclass), titanic_cleaned$survived, positive = "1")
model_age_pclass <- glm(survived ~ age + pclass, data = titanic_cleaned, family = "binomial")
summary(model_age_pclass)
prob_age_pclass <- predict(model_age_pclass, type = "response")
pred_age_pclass <- ifelse(prob_age_pclass > 0.5, 1, 0)
confusionMatrix(factor(pred_age_pclass), titanic_cleaned$survived, positive = "1")
roc_age_pclass <- roc(titanic_cleaned$survived, prob_age_pclass)
plot(rocl_age_pclass, main = "ROC Curve: Modell_age_pclass")
model_age_pclass <- glm(survived ~ age + pclass, data = titanic_cleaned, family = "binomial")
summary(model_age_pclass)
prob_age_pclass <- predict(model_age_pclass, type = "response")
pred_age_pclass <- ifelse(prob_age_pclass > 0.5, 1, 0)
confusionMatrix(factor(pred_age_pclass), titanic_cleaned$survived, positive = "1")
roc_age_pclass <- roc(titanic_cleaned$survived, prob_age_pclass)
plot(roc_age_pclass, main = "ROC Curve: Modell_age_pclass")
auc(roc_age_pclass)
coef_age <- coef(model1)["age"]
coef_age <- coef(model_age_pclass)["age"]
exp(coef_age)
model_age_pclass_sex <- glm(survived ~ age + pclass + sex, data = titanic_cleaned, family = "binomial")
summary(model_age_pclass_sex)
prob_age_pclass_sex <- predict(model_age_pclass_sex, type = "response")
pred_age_pclass_sex <- ifelse(prob_age_pclass_sex > 0.5, 1, 0)
confusionMatrix(factor(pred_age_pclass_sex), titanic_cleaned$survived, positive = "1")
roc_age_pclass_sex <- roc(titanic_cleaned$survived, prob_age_pclass_sex)
plot(roc_age_pclass_sex, main = "ROC Curve: Modell_age_pclass")
auc(roc_age_pclass_sex)
# Confusion matrix at 0.5 cutoff
conf_mat_1 <- confusionMatrix(factor(pred2), titanic_cleaned$survived, positive = "1")
# Confusion matrix at 0.5 cutoff
conf_mat_1 <- confusionMatrix(factor(pred_age_pclass_sex), titanic_cleaned$survived, positive = "1")
conf_mat_1
# FPR and FNR
fp_1 <- conf_mat_05$table[1,2] / (conf_mat_05$table[1,2] + conf_mat_05$table[1,1])
# Confusion matrix at 0.5 cutoff
conf_mat_1 <- confusionMatrix(factor(pred_age_pclass_sex), titanic_cleaned$survived, positive = "1")
conf_mat_1
# FPR and FNR
fp_1 <- conf_mat_1$table[1,2] / (conf_mat_05$table[1,2] + conf_mat_05$table[1,1])
# Confusion matrix at 0.5 cutoff
conf_mat_1 <- confusionMatrix(factor(pred_age_pclass_sex), titanic_cleaned$survived, positive = "1")
conf_mat_1
# FPR and FNR
fp_1 <- conf_mat_1$table[1,2] / (conf_mat_1$table[1,2] + conf_mat_1$table[1,1])
fn_1 <- conf_mat_1$table[2,1] / (conf_mat_1$table[2,1] + conf_mat_1$table[2,2])
fp_1
fn_1
# Confusion matrix at 0.5 cutoff
pred_age_pclass_sex_2 <- ifelse(prob_age_pclass_sex > 0.38, 1, 0)
conf_mat_1 <- confusionMatrix(factor(pred_age_pclass_sex_2), titanic_cleaned$survived, positive = "1")
conf_mat_1
# FPR and FNR
fp_1 <- conf_mat_1$table[1,2] / (conf_mat_1$table[1,2] + conf_mat_1$table[1,1])
fn_1 <- conf_mat_1$table[2,1] / (conf_mat_1$table[2,1] + conf_mat_1$table[2,2])
fp_1
fn_1
# Confusion matrix at 0.5 cutoff
pred_age_pclass_sex_2 <- ifelse(prob_age_pclass_sex > 0.38, 1, 0)
conf_mat_2 <- confusionMatrix(factor(pred_age_pclass_sex_2), titanic_cleaned$survived, positive = "1")
conf_mat_2
# FPR and FNR
fpr_2 <- conf_mat_1$table[1,2] / (conf_mat_1$table[1,2] + conf_mat_1$table[1,1])
fnr_2 <- conf_mat_1$table[2,1] / (conf_mat_1$table[2,1] + conf_mat_1$table[2,2])
fpr_2
fnr_2
conf_mat_1 <- confusionMatrix(factor(pred_age_pclass_sex), titanic_cleaned$survived, positive = "1")
conf_mat_1
# FPR and FNR
fpr_1 <- conf_mat_1$table[1,2] / (conf_mat_1$table[1,2] + conf_mat_1$table[1,1])
fnr_1 <- conf_mat_1$table[2,1] / (conf_mat_1$table[2,1] + conf_mat_1$table[2,2])
fpr_1
fnr_1
